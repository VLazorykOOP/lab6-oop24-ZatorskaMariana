#include <iostream>
using namespace std;

// ----------- НЕ Віртуальне успадкування ---------------

// Базовий клас
class Base {
public:
    int baseData; // Змінна базового класу
};

// Похідні класи
class Derived1 : public Base {
public:
    int d1Data; // Змінна Derived1
};

class Derived2 : public Base {
public:
    int d2Data; // Змінна Derived2
};

// Клас, що наслідує від Derived1 і Derived2
class Final : public Derived1, public Derived2 {
public:
    int finalData; // Змінна Final
};

// ----------- Віртуальне успадкування ---------------

// Базовий клас
class VBase {
public:
    int vbaseData; // Змінна базового класу
};

// Похідні класи з віртуальним успадкуванням
class VDerived1 : virtual public VBase {
public:
    int vd1Data; // Змінна VDerived1
};

class VDerived2 : virtual public VBase {
public:
    int vd2Data; // Змінна VDerived2
};

// Клас, що наслідує від VDerived1 і VDerived2
class VFinal : public VDerived1, public VDerived2 {
public:
    int vfinalData; // Змінна VFinal
};

// Головна функція
int main() {
    cout << "--- Without Virtual Inheritance ---" << endl;
    cout << "Size of Base: " << sizeof(Base) << endl;
    cout << "Size of Derived1: " << sizeof(Derived1) << endl;
    cout << "Size of Derived2: " << sizeof(Derived2) << endl;
    cout << "Size of Final: " << sizeof(Final) << endl;

    cout << "\n--- With Virtual Inheritance ---" << endl;
    cout << "Size of VBase: " << sizeof(VBase) << endl;
    cout << "Size of VDerived1: " << sizeof(VDerived1) << endl;
    cout << "Size of VDerived2: " << sizeof(VDerived2) << endl;
    cout << "Size of VFinal: " << sizeof(VFinal) << endl;

    return 0;
}
